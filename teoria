import numpy as np

# a= np.array([0,1])
# print(a)
#
# b=np.arange(1,5,1, dtype='float64') #od jeden do pieciu, jedynka to krok
# print(b)
#
# print(type(a))
# print(type(b))
# print(b.dtype)
#
# c=b.astype('float64') #robimy kopie i ostanie ona zapisana do zmiennej 'c' i okreslamy jej typ elementow
# print(c)
#
# print(c.shape) #ilosc elementow i wierszy, kolumn jak tablica jest 2wymiarowa
#
# d=np.array([np.arange(2),np.arange(2)])
# print(d)
# print(d.shape)
# print(d.ndim) #ilosc wymiarow tablicy

# zera = np.zeros((5,5))
# print(zera)
#
# jedynka = np.ones((5,5))
# print(jedynka)
#
# pusta=np.empty((2,2)) #losowe liczby w ''pustej'' tablicy
# print(pusta)
# print(pusta[1][1])
#
# a=np.arange(1,5,0.5) #wartosci zmieniaja sie o 0.5
# print(a)
#
# b=np.linspace(1,2,8,endpoint=False) #pomija koncowy element
# print(b)
#
# c,d=np.indices((5,5))
# print(c) #wartosci zerowe w wierszach
# print(d) #wartosci zerowe w kolumnach

# e=np.indices((3,3))
# print(e)
# print(e[0][1][1])
#
# f,g=np.mgrid[0:5, 0:5] #tablica dwuwymiarowa=macierz
# print(f)
# print(g)
#
# h=np.diag([a for a in range(5)],-1) #po przekatnej
# print(h)

# i=np.fromiter(range(5),dtype='int32') # z obiektu iterowanego
# print(i)

#marcin='Marcin'
# mar=np.frombuffer(marcin, dtype='S1')
# print(mar)
# mar_1 = np.array(list(marcin))          #do listy i nie mamy przedrostka b
# print(mar_1.dtype)
# mar_2 = np.array(list(marcin),dtype='S1')
# print(mar_2)
# mar_3= np.array(list(b"Marcin")) #kody asci posczegolnych znakow
# print(mar_3)
# mar_4= np.fromiter(marcin,dtype='U1')
# print(mar_4)

# a=np.ones((2,2)) #dodawanie tablicy i poszczegolnych elementow
# b=np.ones((2,2))
# c=a+b
# print(c)
# d=c-b
# print(d)

# a = np.arange(10)
# print(a)
#
# s = slice(2,7,2) # wyswietlanie konkretnych elementow
# print(a[s])
# s=range(2,7,2)
# print(a[s])
# print(a[2:7:2])
# print(a[1:5]) #wyswietlanie od numeru indeksu do samego konca

b=np.arange(25)
print(b)
mat=b.reshape((5,5)) #tworzenie tablicy dwuwymiarowej z jednowymiarowej, musi byc taka zeby wystarczylo elementow z tablicy
# print(mat[1:2]) #wyswietlanie drugiego wiersza
# print(mat[1:,0:5])
# print(mat[2:5,1:3]) #wycina wiersze od 2 do 4 i kolumny od 1 do 2

a=np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
print(a)
rows=np.array([[0,0],[3,3]])
cols=np.array([[0,2],[0,2]])
y=a[rows,cols]
print(y)


#UZUPELNIENIE z 07.05.2022
import numpy as np
import pandas as ps

# a=np.arange(12).reshape((4,3))
# print(a)
# print(a.sum())
# print(a.sum(axis=0))
# print(a.sum(axis=1)) #odnosimy sie warto≈õciami do wierszy w axisie
#
# print(a.cumsum(axis=1))
#
# b=np.array([20,30,40,50])
# c=np.arange(4)
#
# d=c+b
# print(d)
# print(np.sqrt(c))
# e=np.sqrt(c)
# f=d+e
# print(f)

# a=np.array([[2,5,1],[5,7,1]])
# b=np.array([[2,3],[4,5],[7,1]])
# c=np.dot(a,b) #mnozenie maciezy z zachowaniem majcy
# print(c)
# d=a.dot(b)
# print(d)
#
# e=np.arange(3)
# f=np.arange(3)
# print(np.dot(e,f)) #mnozenie wszystkich elementow razem zgodnie z zasadami mnozenia
# g=np.arange(3)
# h=np.arange([[0],[1],[2]])
# print(g.dot(h))

# a=np.arange(6).reshape((3,2)) #towrzenie plaskiej tablicy i dostep mamy do kazdego z el. oddzielnie
# print(a) #liczba kolumn razy liczba wierszy musi sie rownac ilosci elementow w tablicy wyjsciowej
# # for b in a.flat:
# #     print(b)
# c=a.reshape((2,3)) #mozna zmieniac wymiary macierzy
# print(c)
# b=c.ravel() #splaszczona macierz
# print(b)
# d=c.T #transpozycja - zamiana wierszy i kolumn
# print(d)
